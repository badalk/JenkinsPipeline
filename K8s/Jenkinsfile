pipeline {
    agent any
    
    parameters{
        string(name: 'Repository', defaultValue: 'git@github.com:badalk/AzureResourceGroup.git', description: 'Source Control Branch to build from')        
        string(name: 'Branch', defaultValue: 'master', description: 'Source Control Branch to build from') 
        string(name: 'resourceGroup', defaultValue: 'rg-aks-cicd', description: 'resource Group name where AKS will be deployed') 
        string(name: 'clusterName', defaultValue: 'mycicdakscluster', description: 'name of AKS cluster') 
       
    }

    environment {
        BUILD_DISPLAY_NAME = "test"
        JOB_NAME = "CI Build for Cloud Automation"
   }
    stages {
        
        stage ('Build'){
            steps{
                    // script{
                    //     env.currentBuild.displayname = "test"
                    //     env.currentBuild.description = "test description"
                    // }

                    echo "Getting source code from Repository: ${params.Repository} and Branch: ${params.Branch}"

                    // checkout([$class: 'GitSCM', branches: [[name: "*/${params.Branch}"]], 
                    //     doGenerateSubmoduleConfigurations: false, 
                    //     extensions: [[$class: 'CleanBeforeCheckout']], 
                    //     submoduleCfg: [], 
                    //     userRemoteConfigs: [[credentialsId: 'BadalGit', 
                    //     url: "${params.Repository}"]]])

                    checkout([$class: 'GitSCM', branches: [[name: "*/${params.Branch}"]], 
                        doGenerateSubmoduleConfigurations: false, 
                        extensions: [], 
                        submoduleCfg: [], 
                        userRemoteConfigs: [[credentialsId: 'github-jenkins-ssh-key', 
                                            url: "${params.Repository}"]]])
                    
                    echo "Source code pulled from repository"

            }
         }

        stage ("Test") {
            steps {
                echo "Testing is yet to done..."
            }
        }

        stage ("Deploy"){
            steps {
                echo "Deploying AKS Cluster ..."
                


                sh "pwsh New-AzureRmResourceGroupDeployment -Name ((Get-ChildItem .\AzureResourceGroup1\rg-AKS\azuredeploy-aks.json).BaseName + "-" + ((Get-Date).ToUniversalTime()).ToString('MMdd-HHmm')) `
                                    -ResourceGroupName ${parameters.resourceGroup} `
                                    -TemplateFile .\AzureResourceGroup1\rg-AKS\azuredeploy-aks.json `
                                    -TemplateParameterFile .\AzureResourceGroup1\rg-AKS\azuredeploy-aks-cicd.parameters.json `
                                    -Mode Incremental `
                                    -Force -Verbose `
                                    -ErrorVariable ErrorMessages



            }
        }
        stage ("Configure AKS"){

            steps {
                //get admin contex by connecting to AKS cluster
                echo "0. Getting kubernetes context"
                sh "az aks --get-credentials --resource-group ${params.resourceGroup} --name ${params.clusterName} --admin"

                //1. Create Cluster Role Bindings will
                echo "1. Creating Cluster Admin Role Binding for this AKS cluster"
                sh ".\\AzureResourceGroup1\\rg-AKS\\Scripts\\deploy-aks-create-cluster-admin-rolebindings.sh"

                //2. Install Helm and Initialize

                //3. Install Cert Manager

                //4. Install Ingress Controller

                //5. Install Kube Router 

                //6. Install Azure Pod Identity Resources & Install Azure Key Vault Support
                
                //7. Install OSBA Service Catalog
            }

        }
    }
}