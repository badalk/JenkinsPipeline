def aksClusterResourceGroup = 'UNKNOWN'
pipeline {
    agent any
    
    parameters{
        string(name: 'Repository', defaultValue: 'git@github.com:badalk/AzureResourceGroup.git', description: 'Source Control Branch to build from')        
        string(name: 'Branch', defaultValue: 'master', description: 'Source Control Branch to build from') 
        string(name: 'resourceGroup', defaultValue: 'rg-aks-cicd', description: 'resource Group name where AKS will be deployed') 
        string(name: 'clusterName', defaultValue: 'mycicdakscluster', description: 'name of AKS cluster') 
       
    }

    environment {
        BUILD_DISPLAY_NAME = "test"
        JOB_NAME = "CI Build for Cloud Automation"
   }
    stages {
        
        stage ('Build'){
            steps{

                    echo "Getting source code from Repository: ${params.Repository} and Branch: ${params.Branch}"
                    
                    sh "newgrp jenkins"

                    checkout([$class: 'GitSCM', branches: [[name: "*/${params.Branch}"]], 
                        doGenerateSubmoduleConfigurations: false, 
                        extensions: [], 
                        submoduleCfg: [], 
                        userRemoteConfigs: [[credentialsId: 'github-jenkins-ssh-key', 
                                            url: "${params.Repository}"]]])
                    
                    echo "Source code pulled from repository"

            }
         }

        stage ("Test") {
            steps {
                echo "Testing is yet to done..."
            }
        }

        stage ("Deploy"){
            steps {
                echo "Deploying AKS Cluster ..."
                
                //sh "pwsh -File K8s/deploy-aks-cluster.ps1 ${WORKSPACE}/output.json \"${BUILD_USER}\" ${params.SubscriptionName} ${params.AutomationAccountName} ${params.Name} ${params.ResourceGroupName}"
            }
        }
        stage ("Configure AKS"){

            steps {
                //get admin contex by connecting to AKS cluster
                echo "Testing kubectl"
                sh "kubectl config view"

                echo "------------------------------------------------------------------"
                echo "  0. Getting kubernetes context"
                echo "------------------------------------------------------------------"
                sh "rm ~/.kube/config"
                sh "az login --service-principal -u \"a03158e9-58f5-4e5e-b11b-b5a2df77c661\" -p \"FiS+yQNCI7GrX4jJ5ydyZOH9XmbCFCSBN70SdiwwtWg=\" --tenant \"b25fcb44-9c49-413c-9fdc-b59b39447b84\""
                sh "az aks get-credentials --resource-group ${params.resourceGroup} --name ${params.clusterName} --admin"

                //1. Create Cluster Role Bindings will
                //echo "1. Creating Cluster Admin Role Binding for this AKS cluster"
                //sh ".\\AzureResourceGroup1\\rg-AKS\\Scripts\\deploy-aks-create-cluster-admin-rolebindings.sh"

                //2. Install Helm and Initialize
                echo "--------------------------------------------------------------------------"
                echo "  2. Installing and initializing Helm and installing ingress controller"
                echo "--------------------------------------------------------------------------"
                echo "changing permission"
                sh "id -a"
                // sh "sudo -S chmod 755 -R ${WORKSPACE}${'\n'}Welcome1234#"
                script {
                    nodeResourceGroup="$(az aks show --resource-group ${params.resourceGroup}  --name ${params.clusterName} --query nodeResourceGroup -o tsv)"

                    echo "${nodeResourceGroup}"

                    az network public-ip create --resource-group "${nodeResourceGroup}" --name aksIngressPublicIP --allocation-method static
                }

                //3. Install Cert Manager

                //4. Install Ingress Controller

                //5. Install Kube Router 

                //6. Install Azure Pod Identity Resources & Install Azure Key Vault Support
                
                //7. Install OSBA Service Catalog
            }

        }
    }
}