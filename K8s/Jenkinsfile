pipeline {
    agent any
    
    parameters{
        string(name: 'Repository', defaultValue: 'git@github.com:badalk/AzureResourceGroup.git', description: 'Source Control Branch to build from')        
        string(name: 'Branch', defaultValue: 'master', description: 'Source Control Branch to build from') 
        string(name: 'resourceGroup', defaultValue: 'rg-aks-cicd', description: 'resource Group name where AKS will be deployed') 
        string(name: 'kubernetesVersion', defaultValue: '1.11.3', description: 'Kubernetes version you want to install') 
        string(name: 'clusterName', defaultValue: 'mycicdakscluster', description: 'name of AKS cluster') 
        string(name: 'numberOfNodes', defaultValue: '2', description: 'Number of Node VMs to be depoyed in the cluster') 
        string(name: 'nodeVMSKU', defaultValue: 'Standard_DS1_V2', description: 'SKU of the VM that will be deployed as node in the cluster') 
        string(name: 'maxPodsPerNode', defaultValue: '30', description: 'Number of pods that a node can accomodate') 
        string(name: 'vnetSubnetResourceId', defaultValue: '/subscriptions/4dfeb08c-7e41-40af-a9fa-fabcac401c2d/resourceGroups/rg-network/providers/Microsoft.Network/virtualNetworks/vnet-enterprise/subnets/vnet-k8s-arm', description: 'Subnet Resource Id') 
        string(name: 'logAnalyticsWorkspaceResourceId', defaultValue: '/subscriptions/4dfeb08c-7e41-40af-a9fa-fabcac401c2d/resourcegroups/defaultresourcegroup-eus/providers/microsoft.operationalinsights/workspaces/defaultworkspace-4dfeb08c-7e41-40af-a9fa-fabcac401c2d-eus', description: 'Log Analytics Workspace Id')
        string(name: 'keyVaultResourceId', defaultValue: '/subscriptions/4dfeb08c-7e41-40af-a9fa-fabcac401c2d/resourceGroups/rg-secrets/providers/Microsoft.KeyVault/vaults/aks-sp-key-secret-vault', description: 'Resource ID of the key vault where K8s secrets will be managed') 
        string(name: 'ingressDNSName', defaultValue: 'ingress-mycicdakscluster', description: 'name of ingress controller') 
        string(name: 'acrName', defaultValue:'badalacr', description: 'name of azure container registry')
        // string(name: 'aksServicePrincipalClientId', defaultValue:'a03158e9-58f5-4e5e-b11b-b5a2df77c661', description: 'client ID of the service principal which also has access to read keys from key vault')
        string(name: 'azurePodIdentityResourceId', defaultValue: '/subscriptions/4dfeb08c-7e41-40af-a9fa-fabcac401c2d/resourcegroups/rg-secrets/providers/Microsoft.ManagedIdentity/userAssignedIdentities/k8s-kv-identity', description: 'Resource ID of managed service identity')
        string(name: 'clusterAdminGroupId', defaultValue: '07a020cc-3f77-470a-8e01-3eb97962e0df', description: 'Enter the Azure AD Object ID for the AD group which has admin members for this cluster')

    }

    environment {
        BUILD_DISPLAY_NAME = "test"
        JOB_NAME = "CI Build for Cloud Automation"
   }
    stages {
        
        stage ('Build'){
            steps{

                    echo "Getting source code from Repository: ${params.Repository} and Branch: ${params.Branch}"
                    
                    sh "newgrp jenkins"

                    checkout([$class: 'GitSCM', branches: [[name: "*/${params.Branch}"]], 
                        doGenerateSubmoduleConfigurations: false, 
                        extensions: [], 
                        submoduleCfg: [], 
                        userRemoteConfigs: [[credentialsId: 'github-jenkins-ssh-key', 
                                            url: "${params.Repository}"]]])
                    
                    echo "Source code pulled from repository"

            }
         }

        stage ("Test") {
            steps {
                echo "Testing is yet to done..."
            }
        }

        stage ("Deploy"){
            steps {
                echo "Deploying AKS Cluster ..."
                
                //sh "bash pwsh -File K8s/deploy-aks-cluster.ps1 ${WORKSPACE}/output.json \"${BUILD_USER}\" ${params.SubscriptionName} ${params.AutomationAccountName} ${params.Name} ${params.ResourceGroupName}"
            }
        }
        stage ("Configure AKS"){

            steps {
                //get admin contex by connecting to AKS cluster
                echo "Testing kubectl"
                sh "kubectl config view"

                echo "------------------------------------------------------------------"
                echo "  0. Getting kubernetes context"
                echo "------------------------------------------------------------------"

                // script {
                //     def exists = fileExists "~/.kube/config"
                //     echo 

                //     echo "Kube config exists: ${exists}"
                //     if (exists) {
                //         echo "Removing current kube config"
                //         sh "rm ~/.kube/config"
                //     }
                // }
                sh "rm ~/.kube/config"

                sh "az login --service-principal -u \"a03158e9-58f5-4e5e-b11b-b5a2df77c661\" -p \"FiS+yQNCI7GrX4jJ5ydyZOH9XmbCFCSBN70SdiwwtWg=\" --tenant \"b25fcb44-9c49-413c-9fdc-b59b39447b84\""
                sh "az aks get-credentials --resource-group ${params.resourceGroup} --name ${params.clusterName} --admin"

                //1. Install Helm and Initialize and Install ingress controller
                echo "--------------------------------------------------------------------------"
                echo "  1. Installing and initializing Helm "
                echo "--------------------------------------------------------------------------"
                echo "changing permission"
                sh "id -a"
                // sh "sudo -S chmod 755 -R ${WORKSPACE}${'\n'}Welcome1234#"
                sh "bash ${WORKSPACE}/AzureResourceGroup1/rg-AKS/Scripts/k8s-install-helm.sh"

                //2. Install nginx Ingress Controller
                echo "--------------------------------------------------------------------------"
                echo "  2. Installing nginx ingress controller on static IP"
                echo "--------------------------------------------------------------------------"
                sh "bash ${WORKSPACE}/AzureResourceGroup1/rg-AKS/Scripts/k8s-install-ingress-controller.sh ${params.resourceGroup} ${params.clusterName}"

                //3. Create Cluster Role Bindings based on the admin group id passed
                echo "--------------------------------------------------------------------------"
                echo "3. Creating Cluster Admin Role Binding for this AKS cluster"
                echo "--------------------------------------------------------------------------"
                sh "bash ${WORKSPACE}/AzureResourceGroup1/rg-AKS/Scripts/k8s-install-cluster-admin-rolebinding.sh ${params.acrName} ${params.clusterAdminGroupId}"

                //4. Install Azure Pod Identity Resources & Install Azure Key Vault Support
                echo "------------------------------------------------------------------------------------"
                echo "  4. Install Azure Pod Identity Resources & Install Azure Key Vault Support"
                echo "------------------------------------------------------------------------------------"
                sh "bash ${WORKSPACE}/AzureResourceGroup1/rg-AKS/Scripts/k8s-install-azurepodidentity-keyvault-flextool.sh ${params.resourceGroup} ${params.clusterName} ${params.acrName} ${params.keyVaultResourceId} ${params.azurePodIdentityResourceId}"
/*
                //5. Install Kube Router 
                echo "--------------------------------------------------------------------------"
                echo "  5. Install kube router to support network policies                      "
                echo "--------------------------------------------------------------------------"
                sh "bash ${WORKSPACE}/AzureResourceGroup1/rg-AKS/Scripts/k8s-install-kube-router ${params.resourceGroup} ${params.clusterName}" 

                //6. Install OSBA Service Catalog
                echo "--------------------------------------------------------------------------"
                echo "  6. Install OSBA Service Catalog                     "
                echo "--------------------------------------------------------------------------"
                sh "bash ${WORKSPACE}/AzureResourceGroup1/rg-AKS/Scripts/k8s-install-osba-service-catalog ${params.resourceGroup} ${params.clusterName}" 
                
                //7. Install cluster scaler??
                echo "--------------------------------------------------------------------------"
                echo "  7. Install cluster scaler                     "
                echo "--------------------------------------------------------------------------"
                sh "bash ${WORKSPACE}/AzureResourceGroup1/rg-AKS/Scripts/k8s-install-cluster-scaler ${params.resourceGroup} ${params.clusterName}" 

*/
            }

        }
    }
}